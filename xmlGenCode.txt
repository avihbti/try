xquery version "1.0-ml";

declare default function namespace "http://www.w3.org/2005/xpath-functions";

declare namespace xs = "http://www.w3.org/2001/XMLSchema";

declare variable $xmlSoFar :="";

declare variable $schema := 
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
  <xs:element name="demographicRes">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="Status"/>
        <xs:element ref="memberDemographics"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Status">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="StatusCode"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="StatusCode" type="xs:integer"/>
  <xs:element name="memberDemographics">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="relationship"/>
        <xs:element ref="restriction"/>
        <xs:element ref="enrollmentDate"/>
        <xs:element ref="terminationDate"/>
        <xs:element ref="personInfo"/>
        <xs:element maxOccurs="unbounded" ref="dependentInfo"/>
        <xs:element ref="membershipsLinks"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="dependentInfo">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="relationship"/>
        <xs:element ref="restriction"/>
        <xs:element ref="enrollmentDate"/>
        <xs:element ref="terminationDate"/>
        <xs:element ref="personInfo"/>
        <xs:element ref="membershipsLinks"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="relationship" type="xs:NCName"/>
  <xs:element name="restriction" type="xs:boolean"/>
  <xs:element name="enrollmentDate" type="xs:date"/>
  <xs:element name="terminationDate" type="xs:date"/>
  <xs:element name="personInfo">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="gender"/>
        <xs:element ref="firstName"/>
        <xs:element ref="middleName"/>
        <xs:element ref="lastName"/>
        <xs:element ref="title"/>
        <xs:element ref="prefix"/>
        <xs:element ref="suffix"/>
        <xs:element ref="fullName"/>
        <xs:element ref="DOB"/>
        <xs:element minOccurs="0" ref="contactInfo"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="gender" type="xs:NCName"/>
  <xs:element name="firstName" type="xs:NCName"/>
  <xs:element name="middleName" type="xs:string"/>
  <xs:element name="lastName" type="xs:NCName"/>
  <xs:element name="title" type="xs:integer"/>
  <xs:element name="prefix"/>
  <xs:element name="suffix"/>
  <xs:element name="fullName" type="xs:string"/>
  <xs:element name="DOB" type="xs:date"/>
  <xs:element name="contactInfo">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="usage"/>
        <xs:element ref="email"/>
        <xs:element ref="postAddresses"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="usage" type="xs:NCName"/>
  <xs:element name="email">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="domainName"/>
        <xs:element ref="emailId"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="domainName" type="xs:string"/>
  <xs:element name="emailId" type="xs:string"/>
  <xs:element name="postAddresses">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="state"/>
        <xs:element ref="city"/>
        <xs:element ref="postCode"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="state" type="xs:NCName"/>
  <xs:element name="city" type="xs:NCName"/>
  <xs:element name="postCode" type="xs:integer"/>
  <xs:element name="membershipsLinks">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" ref="_a"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="_a">
    <xs:complexType>
      <xs:attribute name="accessTokenType" use="required" type="xs:NCName"/>
      <xs:attribute name="href" use="required" type="xs:anyURI"/>
      <xs:attribute name="resource" use="required" type="xs:NCName"/>
    </xs:complexType>
  </xs:element>
</xs:schema>;

declare function local:process-element($element as node()) { 
        typeswitch ($element)
        
        case  element(xs:schema)   return
              for $sub-element in  $element/*
                 return  local:process-element($sub-element)
        
        case element(xs:annotation) return
              ()
        
        case  element(xs:element)   return 
               let $min := 
                     if ($element/@minOccurs)
                     then
                         ($element/@minOccurs/string())
                     else 1
                              
               let $max := 
                     if ($element/@maxOccurs)
                     then
                         if ($element/@maxOccurs/string() = "unbounded") 
                         then 5
                         else ($element/@maxOccurs/string())
                     else 1
               let $count := $max
               return 
                  if ($count  >0 )
                  then 
                      for $i in 1 to $count
                      return
                         if ($element/@ref)  
                         then 
                              local:process-element(document{$schema}/xs:schema/xs:element[@name=$element/@ref/string()])
                         else    
                         if (document{$schema}/xs:schema/xs:complexType[@name=$element/@type]) 
                         then 
                             element {$element/@name} {                           
                                   local:process-element(document{$schema}/xs:schema/xs:complexType[@name=$element/@type/string()])
                             }
                         else 
                         (   xdmp:set($xmlSoFar,string-join(($xmlSoFar,$element/@name),"/")),
                         element {$element/@name} {       
                         
                             if  ($element/*)
                             then 
                             for $sub-element in $element/*
                                 return local:process-element($sub-element)
                             else  ($xmlSoFar,xdmp:set($xmlSoFar,fn:substring-before($xmlSoFar,fn:concat("/",$element/@name/string()))))
                             }
                          )                          
                    else ("ELSE")
              
        case element(xs:attribute)   return
                 if ($element/@use="required" or empty($element/@use))
                 then 
                     attribute {$element/@name} { $element/@name/string() }
                 else () 
         
        case  element(xs:all)   return
                 for $sub-element  in $element/*
                 return local:process-element($sub-element)
        
        case  element(xs:sequence)   return
                 for $sub-element in $element/*
                       return local:process-element($sub-element)
        
        case  element(xs:complexType)   return 
              for $sub-element in $element/*
                       return local:process-element($sub-element)
                 
       default return ("DEFAULT")
       
};



let $xml := local:process-element($schema)

return $xml[1]
